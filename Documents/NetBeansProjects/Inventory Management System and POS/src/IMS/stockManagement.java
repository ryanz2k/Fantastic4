/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package IMS;

import java.awt.BorderLayout;
import java.awt.Color;
import java.io.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.*;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.*;

/**
 *
 * @author Ryan
 */
public class stockManagement extends javax.swing.JFrame {
    private String UID;
    DefaultTableModel model;
    
   /**
     * Creates new form ADDITEM
     */
    public stockManagement() {
        initComponents();
        
        model = (DefaultTableModel) itemList.getModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        editItem = new javax.swing.JButton();
        reportLog = new javax.swing.JButton();
        stock = new javax.swing.JButton();
        logout = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jFrame1 = new javax.swing.JFrame();
        jPanel1 = new javax.swing.JPanel();
        editPanel = new javax.swing.JPanel();
        backButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        nameLabel = new javax.swing.JLabel();
        descripLabel = new javax.swing.JLabel();
        priceText = new javax.swing.JTextField();
        descripText = new javax.swing.JTextField();
        quantityLabel = new javax.swing.JLabel();
        priceLabel = new javax.swing.JLabel();
        quantityText = new javax.swing.JTextField();
        productList = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        itemList = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        backupButton1 = new javax.swing.JButton();
        budget = new javax.swing.JLabel();
        budgetLabel = new javax.swing.JLabel();
        importData1 = new javax.swing.JButton();

        editItem.setText("STOCKS");
        editItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editItemActionPerformed(evt);
            }
        });

        reportLog.setText("REPORT/LOG");

        stock.setText("BACKUP");

        logout.setText("LOGOUT");
        logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutActionPerformed(evt);
            }
        });

        jButton2.setText("ADD ITEM");

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Stock Management");

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));
        jPanel1.setPreferredSize(new java.awt.Dimension(800, 500));
        jPanel1.setLayout(null);

        editPanel.setBackground(new java.awt.Color(255, 255, 255));

        backButton.setBackground(new java.awt.Color(102, 102, 102));
        backButton.setForeground(new java.awt.Color(255, 255, 255));
        backButton.setText("BACK");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        deleteButton.setBackground(new java.awt.Color(102, 102, 102));
        deleteButton.setForeground(new java.awt.Color(255, 255, 255));
        deleteButton.setText("RETURN ITEM");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        updateButton.setBackground(new java.awt.Color(102, 102, 102));
        updateButton.setForeground(new java.awt.Color(255, 255, 255));
        updateButton.setText("UPDATE ITEM");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        addButton.setBackground(new java.awt.Color(102, 102, 102));
        addButton.setForeground(new java.awt.Color(255, 255, 255));
        addButton.setText("ORDER ITEM");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        nameLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        nameLabel.setForeground(new java.awt.Color(51, 51, 51));
        nameLabel.setText("Name");

        descripLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        descripLabel.setForeground(new java.awt.Color(51, 51, 51));
        descripLabel.setText("Description");

        priceText.setEditable(false);

        descripText.setEditable(false);

        quantityLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        quantityLabel.setForeground(new java.awt.Color(51, 51, 51));
        quantityLabel.setText("Quantity");

        priceLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        priceLabel.setForeground(new java.awt.Color(51, 51, 51));
        priceLabel.setText("Price ($)");

        quantityText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quantityTextActionPerformed(evt);
            }
        });

        productList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select a Product", "Chardonnay Wine", "Cabernet Sauvignon Wine", "Stout Beer", "Schwarzbier", "Scotch Whisky", "Bourbon Whisky", "Plymouth Gin", "Old Tom Gin", "Sweet Cider", "Bitter Cider", "Fruit Vodka", "Plain Vodka", "Distilled Soju", "Navy Rum", "Rhum Agricole" }));
        productList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productListActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout editPanelLayout = new javax.swing.GroupLayout(editPanel);
        editPanel.setLayout(editPanelLayout);
        editPanelLayout.setHorizontalGroup(
            editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editPanelLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(editPanelLayout.createSequentialGroup()
                        .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(quantityLabel)
                            .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(productList, 0, 236, Short.MAX_VALUE)
                            .addComponent(quantityText))
                        .addGap(26, 26, 26)
                        .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(descripLabel)
                            .addComponent(priceLabel))
                        .addGap(18, 18, 18)
                        .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(descripText)
                            .addComponent(priceText)))
                    .addGroup(editPanelLayout.createSequentialGroup()
                        .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        editPanelLayout.setVerticalGroup(
            editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editPanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backButton)
                    .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(updateButton))
                .addGap(18, 18, 18)
                .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(descripLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(productList)
                        .addComponent(descripText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(priceText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(priceLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(quantityText)
                            .addComponent(quantityLabel))))
                .addGap(65, 65, 65))
        );

        jPanel1.add(editPanel);
        editPanel.setBounds(40, 290, 720, 160);

        itemList.setAutoCreateRowSorter(true);
        itemList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID#", "Product", "Description", "Quantity (Bottles)", "Price ( $ )", "Total Price ($)", "Stock Level"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        itemList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                itemListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(itemList);
        if (itemList.getColumnModel().getColumnCount() > 0) {
            itemList.getColumnModel().getColumn(0).setResizable(false);
            itemList.getColumnModel().getColumn(1).setResizable(false);
            itemList.getColumnModel().getColumn(2).setResizable(false);
            itemList.getColumnModel().getColumn(3).setResizable(false);
            itemList.getColumnModel().getColumn(4).setResizable(false);
            itemList.getColumnModel().getColumn(5).setResizable(false);
            itemList.getColumnModel().getColumn(6).setResizable(false);
        }

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(40, 20, 720, 250);

        jButton1.setText("jButton1");
        jPanel1.add(jButton1);
        jButton1.setBounds(380, 140, 75, 23);

        backupButton1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        backupButton1.setText("BACKUP");
        backupButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backupButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(backupButton1);
        backupButton1.setBounds(40, 480, 125, 39);

        budget.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        budget.setForeground(new java.awt.Color(255, 255, 255));
        budget.setText("10000");
        jPanel1.add(budget);
        budget.setBounds(360, 460, 150, 70);

        budgetLabel.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        budgetLabel.setForeground(new java.awt.Color(255, 255, 255));
        budgetLabel.setText("BUDGET: $");
        jPanel1.add(budgetLabel);
        budgetLabel.setBounds(180, 460, 190, 70);

        importData1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        importData1.setText("IMPORT DATA");
        importData1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importData1ActionPerformed(evt);
            }
        });
        jPanel1.add(importData1);
        importData1.setBounds(540, 480, 220, 39);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void editItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editItemActionPerformed
        // TODO add your handling code here:
        dispose();
        stockManagement additem = new stockManagement();
        additem.setVisible(true);
    }//GEN-LAST:event_editItemActionPerformed

    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutActionPerformed
        // TODO add your handling code here:
        dispose();
        new AdminLogin().setVisible(true);
    }//GEN-LAST:event_logoutActionPerformed

    private void itemListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itemListMouseClicked
        // TODO add your handling code here:\
        String IDDescription = itemList.getValueAt(itemList.getSelectedRow(), 0).toString();
        String tblDescription = itemList.getValueAt(itemList.getSelectedRow(), 2).toString();
        String tblQuantity = itemList.getValueAt(itemList.getSelectedRow(), 3).toString();
        String tblPrice = itemList.getValueAt(itemList.getSelectedRow(), 4).toString();
        
        int IDint = Integer.parseInt(IDDescription);
        
        productList.setSelectedIndex(IDint);
        descripText.setText(tblDescription);
        quantityText.setText(tblQuantity);
        priceText.setText(tblPrice);
    }//GEN-LAST:event_itemListMouseClicked

    private void quantityTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quantityTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_quantityTextActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // Validate if empty
        if (descripText.getText().equals("")||quantityText.getText().equals("")||priceText.getText().equals("")){
            JOptionPane.showMessageDialog(this,"Please Fill in The Blanks","Error",JOptionPane.ERROR_MESSAGE);
        }
        else{
            int quantityInt = Integer.parseInt(quantityText.getText());
            int priceInt = Integer.parseInt(priceText.getText());
            String targetUID = null;
            int totalPrice = quantityInt * priceInt;
            
            int prompt = JOptionPane.showOptionDialog(
                null, // Parent component (null for default)
                "Total Cost is $"+totalPrice+".\nDo you want to continue the Transaction?", // Message
                "Confirmation", // Title
                JOptionPane.YES_NO_OPTION, // Option type
                JOptionPane.QUESTION_MESSAGE, // Message type
                null, // Icon (null for default)
                new String[]{"Yes", "No"}, // Options
                "Yes" // Default option
            );
            if (prompt == JOptionPane.YES_OPTION){
                
                //deducting budget
                String budgetString = budget.getText();
                int budgetInt = Integer.parseInt(budgetString);
                int remainingBudget = budgetInt - totalPrice;
                budgetString = String.valueOf(remainingBudget);
                budget.setText(budgetString);
                
                
                    for (int row = 0; row < itemList.getRowCount(); row++){
                    targetUID = itemList.getValueAt(row, 0).toString();

                if (UID.equals(targetUID))
                {
                    String quantityString = itemList.getValueAt(row,3).toString();
                    int existingQuantity = Integer.parseInt(quantityString);
                    int totalInt = quantityInt + existingQuantity;
                    String totalIntString = String.valueOf(totalInt);
                    itemList.setValueAt(totalIntString, row, 3);

                    String totalPriceString = itemList.getValueAt(row,4).toString();
                    int totalPriceInt = Integer.parseInt(totalPriceString);
                    int newTotalPrice = totalPriceInt * totalInt;

                    itemList.setValueAt(newTotalPrice, row, 5);
                    productList.setSelectedIndex(0);
                    descripText.setText("");
                    quantityText.setText("");
                    priceText.setText("");
                    JOptionPane.showMessageDialog(this, "Product successfuly added");
                }
                }
                if (!UID.equals(targetUID))
                {
                    model.insertRow(model.getRowCount(),new Object[] {UID,productList.getSelectedItem().toString(),descripText.getText(),
                        quantityText.getText(),priceText.getText(),totalPrice});
                    productList.setSelectedIndex(0);
                    descripText.setText("");
                    quantityText.setText("");
                    priceText.setText("");
                    JOptionPane.showMessageDialog(this, "Product successfuly added");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Transaction Cancelled");
            }
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        // TODO add your handling code here:
        if (itemList.getSelectedRowCount()==1){
            String description = descripText.getText();
            String quantity = quantityText.getText();
            String price = priceText.getText();
               
            int quantityInt = Integer.parseInt(quantityText.getText());
            int priceInt = Integer.parseInt(priceText.getText());
            String existingQuantity = itemList.getValueAt(itemList.getSelectedRow(), 3).toString();
            int existingQuantityInt = Integer.parseInt(existingQuantity);
            
            int totalPrice = quantityInt * priceInt;
            
            int pricee = (quantityInt - existingQuantityInt) * priceInt;
            //deducting budget
            int prompt = JOptionPane.showOptionDialog(
                null, // Parent component (null for default)
                "Total is $"+pricee+".\nDo you want to continue the Transaction?", // Message
                "Confirmation", // Title
                JOptionPane.YES_NO_OPTION, // Option type
                JOptionPane.QUESTION_MESSAGE, // Message type
                null, // Icon (null for default)
                new String[]{"Yes", "No"}, // Options
                "Yes" // Default option
            );
            if (prompt == JOptionPane.YES_OPTION) {
                String budgetString = budget.getText();
                int budgetInt = Integer.parseInt(budgetString);
                int remainingBudget = budgetInt - pricee;
                budgetString = String.valueOf(remainingBudget);
                budget.setText(budgetString);

                itemList.setValueAt(UID, itemList.getSelectedRow(),0);
                itemList.setValueAt(description, itemList.getSelectedRow(), 2);
                itemList.setValueAt(quantity, itemList.getSelectedRow(), 3);
                itemList.setValueAt(price, itemList.getSelectedRow(), 4);
                itemList.setValueAt(totalPrice, itemList.getSelectedRow(), 5);
                JOptionPane.showMessageDialog(this, "Product successfuly updated");
                productList.setSelectedIndex(0);
                descripText.setText("");
                quantityText.setText("");
                priceText.setText("");
                itemList.getSelectionModel().clearSelection();
            }else {
                JOptionPane.showMessageDialog(this, "Update Cancelled");
            }
        }
        else{
            if(itemList.getRowCount()==0){
                JOptionPane.showMessageDialog(this, "The Table is Empty, Please Add a Product First.");
            }
            else{
                JOptionPane.showMessageDialog(this, "Please select a row to update");
            }
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        if (itemList.getSelectedRowCount()==1){
            //deducting budget
            
            int quantityInt = Integer.parseInt(quantityText.getText());
            int priceInt = Integer.parseInt(priceText.getText());
            int totalPrice = quantityInt * priceInt;
            int laborFee = (int) (totalPrice*0.3);
            totalPrice -= laborFee;
            
            int prompt = JOptionPane.showOptionDialog(
                null, // Parent component (null for default)
                "You will only receive $"+totalPrice+".\n$"+laborFee+" will be deducted for the Delivery and Labor Fee.\nDo you still want to return the Item(s)?", // Message
                "Confirmation", // Title
                JOptionPane.YES_NO_OPTION, // Option type
                JOptionPane.QUESTION_MESSAGE, // Message type
                null, // Icon (null for default)
                new String[]{"Yes", "No"}, // Options
                "Yes" // Default option
            );
            if (prompt == JOptionPane.YES_OPTION){
                String budgetString = budget.getText();
                int budgetInt = Integer.parseInt(budgetString);
                int remainingBudget = budgetInt + totalPrice;
                budgetString = String.valueOf(remainingBudget);
                budget.setText(budgetString);
                model.removeRow(itemList.getSelectedRow());
                productList.setSelectedIndex(0);
                descripText.setText("");
                quantityText.setText("");
                priceText.setText("");
                itemList.getSelectionModel().clearSelection();
                JOptionPane.showMessageDialog(this, "Product successfuly removed");
            }else {
                JOptionPane.showMessageDialog(this, "Item Return Cancelled");
            }
            
        }
        else{
            if(itemList.getRowCount()==0){
                JOptionPane.showMessageDialog(this, "The Table is Empty, Please Add a Product First.");
            }
            else{
                JOptionPane.showMessageDialog(this, "Please select a row to delete");
            }
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        dispose();
        IMS ims = new IMS();
        ims.setVisible(true);
    }//GEN-LAST:event_backButtonActionPerformed

    private void productListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productListActionPerformed
        // TODO add your handling code here:
        String selectedItem = productList.getSelectedItem().toString();
        switch (selectedItem){
            case "Chardonnay Wine":
                UID = "001";
                descripText.setText("Popular dry white wine");
                priceText.setText("25");
                break;
            case "Cabernet Sauvignon Wine":
                UID = "002";
                descripText.setText("Bold, full-bodied red wine");
                priceText.setText("15");
                break;
            case "Stout Beer":
                UID = "003";
                descripText.setText("Dark, roasted, malty beer");
                priceText.setText("8");
                break;
            case "Schwarzbier":
                UID = "004";
                descripText.setText("German-style black lager");
                priceText.setText("10");
                break;
            case "Scotch Whisky":
                UID = "005";
                descripText.setText("Smoky, peaty Scottish whisky");
                priceText.setText("30");
                break;
            case "Bourbon Whisky":
                UID = "006";
                descripText.setText("American oak-aged whisky");
                priceText.setText("20");
                break;
            case "Plymouth Gin":
                UID = "007";
                descripText.setText("Classic, citrusy British gin");
                priceText.setText("20");
                break;
            case "Old Tom Gin":
                UID = "008";
                descripText.setText("Slightly sweetened gin variety");
                priceText.setText("25");
                break;
            case "Sweet Cider":
                UID = "009";
                descripText.setText("Apple juice with alcohol");
                priceText.setText("8");
                break;
            case "Bitter Cider":
                UID = "010";
                descripText.setText("Dry, tart apple cider");
                priceText.setText("8");
                break;
            case "Fruit Vodka":
                UID = "011";
                descripText.setText("Vodka with fruit flavoring");
                priceText.setText("15");
                break;
            case "Plain Vodka":
                UID = "012";
                descripText.setText("Neutral, clear spirit");
                priceText.setText("10");
                break;
            case "Distilled Soju":
                UID = "013";
                descripText.setText("Clear Korean liquor");
                priceText.setText("15");
                break;
            case "Navy Rum":
                UID = "014";
                descripText.setText("High-proof, spiced rum");
                priceText.setText("15");
                break;
            case "Rhum Agricole":
                UID = "015";
                descripText.setText("French Caribbean rum variety");
                priceText.setText("30");
                break;      
        }
    }//GEN-LAST:event_productListActionPerformed

    private void backupButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backupButton1ActionPerformed
        // TODO add your handling code here:
        if (itemList.getRowCount()!= 0)
        {
            String filepath = "data.txt";
            File file = new File(filepath);

            try{
                FileWriter fw = new FileWriter(file);
                BufferedWriter bw = new BufferedWriter(fw);

                for(int i = 0; i < itemList.getRowCount(); i++){
                    for (int j = 0; j < itemList.getColumnCount(); j++){
                        bw.write(itemList.getValueAt(i,j).toString()+"_");
                    }
                    bw.newLine();
                }
                bw.close();
                fw.close();

            } catch (IOException ex){
                java.util.logging.Logger.getLogger(stockManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
            JOptionPane.showMessageDialog(this, "Backup has been Created");
        }
        else{
            JOptionPane.showMessageDialog(this, "There is no data to be saved");
        }
        
    }//GEN-LAST:event_backupButton1ActionPerformed

    private void importData1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importData1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_importData1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(stockManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(stockManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(stockManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(stockManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new stockManagement().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton backButton;
    private javax.swing.JButton backupButton1;
    private javax.swing.JLabel budget;
    private javax.swing.JLabel budgetLabel;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel descripLabel;
    private javax.swing.JTextField descripText;
    private javax.swing.JButton editItem;
    private javax.swing.JPanel editPanel;
    private javax.swing.JButton importData1;
    private javax.swing.JTable itemList;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton logout;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JLabel priceLabel;
    private javax.swing.JTextField priceText;
    private javax.swing.JComboBox<String> productList;
    private javax.swing.JLabel quantityLabel;
    private javax.swing.JTextField quantityText;
    private javax.swing.JButton reportLog;
    private javax.swing.JButton stock;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
